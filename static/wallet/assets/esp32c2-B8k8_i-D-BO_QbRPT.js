import{ESP32C3ROM as _}from"./esp32c3-CgdtzNJE-CaIATbJM.js";import"./rom-B2LvkjpK-f2JiXiqJ.js";class a extends _{constructor(){super(...arguments),this.CHIP_NAME="ESP32-C2",this.IMAGE_CHIP_ID=12,this.EFUSE_BASE=1610647552,this.MAC_EFUSE_REG=this.EFUSE_BASE+64,this.UART_CLKDIV_REG=1610612756,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612860,this.XTAL_CLK_DIVIDER=1,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88}async getPkgVersion(i){const t=this.EFUSE_BASE+64+4;return await i.readReg(t)>>22&7}async getChipRevision(i){const t=this.EFUSE_BASE+64+4;return(await i.readReg(t)&3<<20)>>20}async getChipDescription(i){let t;const e=await this.getPkgVersion(i);return t=e===0||e===1?"ESP32-C2":"unknown ESP32-C2",t+=" (revision "+await this.getChipRevision(i)+")",t}async getChipFeatures(i){return["Wi-Fi","BLE"]}async getCrystalFreq(i){const t=await i.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,e=i.transport.baudrate*t/1e6/this.XTAL_CLK_DIVIDER;let s;return s=e>33?40:26,Math.abs(s-e)>1&&i.info("WARNING: Unsupported crystal in use"),s}async changeBaudRate(i){await this.getCrystalFreq(i)===26&&i.changeBaud()}_d2h(i){const t=(+i).toString(16);return t.length===1?"0"+t:t}async readMac(i){let t=await i.readReg(this.MAC_EFUSE_REG);t>>>=0;let e=await i.readReg(this.MAC_EFUSE_REG+4);e=e>>>0&65535;const s=new Uint8Array(6);return s[0]=e>>8&255,s[1]=255&e,s[2]=t>>24&255,s[3]=t>>16&255,s[4]=t>>8&255,s[5]=255&t,this._d2h(s[0])+":"+this._d2h(s[1])+":"+this._d2h(s[2])+":"+this._d2h(s[3])+":"+this._d2h(s[4])+":"+this._d2h(s[5])}getEraseSize(i,t){return t}}export{a as ESP32C2ROM};
