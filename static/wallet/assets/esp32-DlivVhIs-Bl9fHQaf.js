import{e as r}from"./rom-B2LvkjpK-f2JiXiqJ.js";class _ extends r{constructor(){super(...arguments),this.CHIP_NAME="ESP32",this.IMAGE_CHIP_ID=0,this.EFUSE_RD_REG_BASE=1073061888,this.DR_REG_SYSCON_BASE=1073111040,this.UART_CLKDIV_REG=1072955412,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612856,this.XTAL_CLK_DIVIDER=1,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=4096,this.SPI_REG_BASE=1072963584,this.SPI_USR_OFFS=28,this.SPI_USR1_OFFS=32,this.SPI_USR2_OFFS=36,this.SPI_W0_OFFS=128,this.SPI_MOSI_DLEN_OFFS=40,this.SPI_MISO_DLEN_OFFS=44}async readEfuse(e,s){const i=this.EFUSE_RD_REG_BASE+4*s;return e.debug("Read efuse "+i),await e.readReg(i)}async getPkgVersion(e){const s=await this.readEfuse(e,3);let i=s>>9&7;return i+=(s>>2&1)<<3,i}async getChipRevision(e){const s=await this.readEfuse(e,3),i=await this.readEfuse(e,5),t=await e.readReg(this.DR_REG_SYSCON_BASE+124);return s>>15&1?i>>20&1?t>>31&1?3:2:1:0}async getChipDescription(e){const s=["ESP32-D0WDQ6","ESP32-D0WD","ESP32-D2WD","","ESP32-U4WDH","ESP32-PICO-D4","ESP32-PICO-V3-02"];let i="";const t=await this.getPkgVersion(e),a=await this.getChipRevision(e),h=a==3;return 1&await this.readEfuse(e,3)&&(s[0]="ESP32-S0WDQ6",s[1]="ESP32-S0WD"),h&&(s[5]="ESP32-PICO-V3"),i=t>=0&&t<=6?s[t]:"Unknown ESP32",!h||t!==0&&t!==1||(i+="-V3"),i+" (revision "+a+")"}async getChipFeatures(e){const s=["Wi-Fi"],i=await this.readEfuse(e,3);!(2&i)&&s.push(" BT"),1&i?s.push(" Single Core"):s.push(" Dual Core"),8192&i&&(4096&i?s.push(" 160MHz"):s.push(" 240MHz"));const t=await this.getPkgVersion(e);[2,4,5,6].indexOf(t)!==-1&&s.push(" Embedded Flash"),t===6&&s.push(" Embedded PSRAM"),await this.readEfuse(e,4)>>8&31&&s.push(" VRef calibration in efuse"),i>>14&1&&s.push(" BLK3 partially reserved");const a=3&await this.readEfuse(e,6);return s.push(" Coding Scheme "+["None","3/4","Repeat (UNSUPPORTED)","Invalid"][a]),s}async getCrystalFreq(e){const s=await e.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,i=e.transport.baudrate*s/1e6/this.XTAL_CLK_DIVIDER;let t;return t=i>33?40:26,Math.abs(t-i)>1&&e.info("WARNING: Unsupported crystal in use"),t}_d2h(e){const s=(+e).toString(16);return s.length===1?"0"+s:s}async readMac(e){let s=await this.readEfuse(e,1);s>>>=0;let i=await this.readEfuse(e,2);i>>>=0;const t=new Uint8Array(6);return t[0]=i>>8&255,t[1]=255&i,t[2]=s>>24&255,t[3]=s>>16&255,t[4]=s>>8&255,t[5]=255&s,this._d2h(t[0])+":"+this._d2h(t[1])+":"+this._d2h(t[2])+":"+this._d2h(t[3])+":"+this._d2h(t[4])+":"+this._d2h(t[5])}}export{_ as ESP32ROM};
