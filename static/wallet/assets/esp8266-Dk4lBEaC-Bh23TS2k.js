import{e as r}from"./rom-B2LvkjpK-f2JiXiqJ.js";class a extends r{constructor(){super(...arguments),this.CHIP_NAME="ESP8266",this.CHIP_DETECT_MAGIC_VALUE=[4293968129],this.EFUSE_RD_REG_BASE=1072693328,this.UART_CLKDIV_REG=1610612756,this.UART_CLKDIV_MASK=1048575,this.XTAL_CLK_DIVIDER=2,this.FLASH_WRITE_SIZE=16384,this.BOOTLOADER_FLASH_OFFSET=0,this.UART_DATE_REG_ADDR=0,this.FLASH_SIZES={"512KB":0,"256KB":16,"1MB":32,"2MB":48,"4MB":64,"2MB-c1":80,"4MB-c1":96,"8MB":128,"16MB":144},this.SPI_REG_BASE=1610613248,this.SPI_USR_OFFS=28,this.SPI_USR1_OFFS=32,this.SPI_USR2_OFFS=36,this.SPI_MOSI_DLEN_OFFS=0,this.SPI_MISO_DLEN_OFFS=0,this.SPI_W0_OFFS=64,this.getChipFeatures=async t=>{const e=["WiFi"];return await this.getChipDescription(t)=="ESP8285"&&e.push("Embedded Flash"),e}}async readEfuse(t,e){const i=this.EFUSE_RD_REG_BASE+4*e;return t.debug("Read efuse "+i),await t.readReg(i)}async getChipDescription(t){const e=await this.readEfuse(t,2);return 16&await this.readEfuse(t,0)|65536&e?"ESP8285":"ESP8266EX"}async getCrystalFreq(t){const e=await t.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,i=t.transport.baudrate*e/1e6/this.XTAL_CLK_DIVIDER;let _;return _=i>33?40:26,Math.abs(_-i)>1&&t.info("WARNING: Detected crystal freq "+i+"MHz is quite different to normalized freq "+_+"MHz. Unsupported crystal in use?"),_}_d2h(t){const e=(+t).toString(16);return e.length===1?"0"+e:e}async readMac(t){let e=await this.readEfuse(t,0);e>>>=0;let i=await this.readEfuse(t,1);i>>>=0;let _=await this.readEfuse(t,3);_>>>=0;const s=new Uint8Array(6);return _!=0?(s[0]=_>>16&255,s[1]=_>>8&255,s[2]=255&_):i>>16&255?(i>>16&255)==1?(s[0]=172,s[1]=208,s[2]=116):t.error("Unknown OUI"):(s[0]=24,s[1]=254,s[2]=52),s[3]=i>>8&255,s[4]=255&i,s[5]=e>>24&255,this._d2h(s[0])+":"+this._d2h(s[1])+":"+this._d2h(s[2])+":"+this._d2h(s[3])+":"+this._d2h(s[4])+":"+this._d2h(s[5])}getEraseSize(t,e){return e}}export{a as ESP8266ROM};
