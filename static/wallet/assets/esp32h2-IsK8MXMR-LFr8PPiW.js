import{e as h}from"./rom-B2LvkjpK-f2JiXiqJ.js";class S extends h{constructor(){super(...arguments),this.CHIP_NAME="ESP32-H2",this.IMAGE_CHIP_ID=16,this.EFUSE_BASE=1610647552,this.MAC_EFUSE_REG=this.EFUSE_BASE+68,this.UART_CLKDIV_REG=1072955412,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612860,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88,this.USB_RAM_BLOCK=2048,this.UARTDEV_BUF_NO_USB=3,this.UARTDEV_BUF_NO=1070526796}async getChipDescription(_){return this.CHIP_NAME}async getChipFeatures(_){return["BLE","IEEE802.15.4"]}async getCrystalFreq(_){return 32}_d2h(_){const t=(+_).toString(16);return t.length===1?"0"+t:t}async postConnect(_){const t=255&await _.readReg(this.UARTDEV_BUF_NO);_.debug("In _post_connect "+t),t==this.UARTDEV_BUF_NO_USB&&(_.ESP_RAM_BLOCK=this.USB_RAM_BLOCK)}async readMac(_){let t=await _.readReg(this.MAC_EFUSE_REG);t>>>=0;let i=await _.readReg(this.MAC_EFUSE_REG+4);i=i>>>0&65535;const s=new Uint8Array(6);return s[0]=i>>8&255,s[1]=255&i,s[2]=t>>24&255,s[3]=t>>16&255,s[4]=t>>8&255,s[5]=255&t,this._d2h(s[0])+":"+this._d2h(s[1])+":"+this._d2h(s[2])+":"+this._d2h(s[3])+":"+this._d2h(s[4])+":"+this._d2h(s[5])}getEraseSize(_,t){return t}}export{S as ESP32H2ROM};
