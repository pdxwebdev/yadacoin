import{e as E}from"./rom-B2LvkjpK-f2JiXiqJ.js";let _=class extends E{constructor(){super(...arguments),this.CHIP_NAME="ESP32-C3",this.IMAGE_CHIP_ID=5,this.EFUSE_BASE=1610647552,this.MAC_EFUSE_REG=this.EFUSE_BASE+68,this.UART_CLKDIV_REG=1072955412,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612860,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88}async getPkgVersion(s){const t=this.EFUSE_BASE+68+12;return await s.readReg(t)>>21&7}async getChipRevision(s){const t=this.EFUSE_BASE+68+12;return(await s.readReg(t)&7<<18)>>18}async getChipDescription(s){let t;return t=await this.getPkgVersion(s)===0?"ESP32-C3":"unknown ESP32-C3",t+=" (revision "+await this.getChipRevision(s)+")",t}async getFlashCap(s){const t=this.EFUSE_BASE+68+12;return await s.readReg(t)>>27&7}async getFlashVendor(s){const t=this.EFUSE_BASE+68+16;return{1:"XMC",2:"GD",3:"FM",4:"TT",5:"ZBIT"}[await s.readReg(t)>>0&7]||""}async getChipFeatures(s){const t=["Wi-Fi","BLE"],i=await this.getFlashCap(s),e=await this.getFlashVendor(s),h={0:null,1:"Embedded Flash 4MB",2:"Embedded Flash 2MB",3:"Embedded Flash 1MB",4:"Embedded Flash 8MB"}[i],a=h!==void 0?h:"Unknown Embedded Flash";return h!==null&&t.push(`${a} (${e})`),t}async getCrystalFreq(s){return 40}_d2h(s){const t=(+s).toString(16);return t.length===1?"0"+t:t}async readMac(s){let t=await s.readReg(this.MAC_EFUSE_REG);t>>>=0;let i=await s.readReg(this.MAC_EFUSE_REG+4);i=i>>>0&65535;const e=new Uint8Array(6);return e[0]=i>>8&255,e[1]=255&i,e[2]=t>>24&255,e[3]=t>>16&255,e[4]=t>>8&255,e[5]=255&t,this._d2h(e[0])+":"+this._d2h(e[1])+":"+this._d2h(e[2])+":"+this._d2h(e[3])+":"+this._d2h(e[4])+":"+this._d2h(e[5])}getEraseSize(s,t){return t}};export{_ as ESP32C3ROM};
